select "title", "rating" from "film" where "rating" = 'R'; --2. Muestra los nombres de todas las películas con una clasificación por edades de ‘R’
select "actor_id", "first_name" from "actor" where "actor_id" >= 30 and "actor_id" <= 40; --3. Encuentra los nombres de los actores que tengan un “actor_id” entre 30 y 40
select title from film where original_language_id = language_id; --4. Obtén las películas cuyo idioma coincide con el idioma original.
select "title", "length" from "film" order by "length" asc; --5. Ordena las películas por duración de forma ascendente.
select "first_name", "last_name" from "actor" where "last_name" = 'ALLEN'; --6. Encuentra el nombre y apellido de los actores que tengan ‘Allen’ en su apellido.
select "rating", COUNT(*) as "total_peliculas" from "film" group by "rating" ORDER BY "rating"; --7. Encuentra la cantidad total de películas en cada clasificación de la tabla “film” y muestra la clasificación junto con el recuento.
select "title", "rating", "length" from "film" where "rating" = 'PG-13' and "length" = 180; --8. Encuentra el título de todas las películas que son ‘PG-13’ o tienen una duración mayor a 3 horas en la tabla film.
select VARIANCE ("replacement_cost") from "film"; --9. Encuentra la variabilidad de lo que costaría reemplazar las películas.
select MAX ("length") as "mayor_duracion", MIN ("length") as "menor_duracion" from "film"; --10. Encuentra la mayor y menor duración de una película de nuestra BBDD.
select "film"."rental_rate" from "film" join "inventory" on "film"."film_id" = "inventory"."film_id"
join "rental" on "inventory"."inventory_id" = "rental"."inventory_id" order by "rental"."rental_date" desc OFFSET 2 LIMIT 1; --11. Encuentra lo que costó el antepenúltimo alquiler ordenado por día.
select "title", "rating" from "film" where "rating" not in ('NC-17', 'G'); --12. Encuentra el título de las películas en la tabla “film” que no sean ni ‘NC-17’ ni ‘G’ en cuanto a su clasificación.
select "rating", AVG("length") from "film" group by "rating" ORDER BY "rating"; --13. Encuentra el promedio de duración de las películas para cada clasificación de la tabla film y muestra la clasificación junto con el promedio de duración
select "title", "length" from "film" where "length" > 180; --14. Encuentra el título de todas las películas que tengan una duración mayor a 180 minutos.
select SUM("amount") as "total_generado" from "payment"; --15. ¿Cuánto dinero ha generado en total la empresa?
select "customer_id","first_name", "last_name" from "customer" order by "customer_id" desc limit 10; --16. Muestra los 10 clientes con mayor valor de id.
select "actor"."first_name", "actor"."last_name", "film"."title" from actor join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
join "film" on "film"."film_id" = "film_actor"."film_id" where "title" = 'EGG IGBY'; --17. Encuentra el nombre y apellido de los actores que aparecen en la película con título ‘Egg Igby’.
select DISTINCT "title" from "film"; --18. Selecciona todos los nombres de las películas únicos.
select "film"."title", "film"."length", "category"."name" from "film" join "film_category" on "film"."film_id" = "film_category"."film_id"
join "category" on "category"."category_id" = "film_category"."category_id" where "film"."length" > 180 and "category"."name" = 'Comedy'; --19. Encuentra el título de las películas que son comedias y tienen una duración mayor a 180 minutos en la tabla “film”.
select ROUND(AVG("film"."length")) as "promedio_duracion", "category"."name" from "film" join "film_category" on "film"."film_id" = "film_category"."film_id"
join "category" on "category"."category_id" = "film_category"."category_id" group by "category"."name" HAVING AVG("film"."length") > 110; --20. Encuentra las categorías de películas que tienen un promedio de duración superior a 110 minutos y muestra el nombre de la categoría junto con el promedio de duración.
select ROUND(AVG("film"."rental_duration")) as "duracion_media" from "film"; --21. ¿Cuál es la media de duración del alquiler de las películas?
select CONCAT("first_name", ' ', "last_name") from "actor"; --22. Crea una columna con el nombre y apellidos de todos los actores y actrices.
select DATE("rental_date") as "dias", COUNT(*) as "numero_alquileres" from "rental" group by DATE("rental_date") order by "numero_alquileres" desc; --23. Números de alquiler por día, ordenados por cantidad de alquiler de forma descendente.
select "title", "length" from "film" WHERE "length" > (select AVG("length") from "film"); --24. Encuentra las películas con una duración superior al promedio.
select DATE_TRUNC('month', "rental_date") as "mes", COUNT(*) as "numero_alquileres_mes" from "rental" group by DATE_TRUNC('month', "rental_date") order by "mes"; --25. Averigua el número de alquileres registrados por mes.
select ROUND(AVG("amount")) as "promedio", ROUND(STDDEV("amount")) as "desviacion_estandar", ROUND(VARIANCE("amount")) as "varianza" from "payment"; --26. Encuentra el promedio, la desviación estándar y varianza del total pagado.
select "title", "rental_rate" from "film" where "rental_rate" > (select AVG("rental_rate") from "film"); --27. ¿Qué películas se alquilan por encima del precio medio?
select "actor_id" from "film_actor" group BY "actor_id" having COUNT(film_id) > 40; --28. Muestra el id de los actores que hayan participado en más de 40 películas.
select "film"."title", COUNT("inventory"."inventory_id") as "copias_disponibles" from "film" left join "inventory" on "film"."film_id" = "inventory"."film_id"
group BY "film"."film_id", "film"."title" order by "film"."title"; --29. Obtener todas las películas y, si están disponibles en el inventario, mostrar la cantidad disponible.
select "actor"."actor_id", "actor"."first_name", "actor"."last_name", COUNT(*) as "numero_peliculas" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
group by "actor"."actor_id", "actor"."first_name", "actor"."last_name" order by "actor"."actor_id"; --30. Obtener los actores y el número de películas en las que ha actuado.
select "film"."title", "actor"."first_name", "actor"."last_name" from "film" left join "film_actor" on "film"."film_id" = "film_actor"."film_id"
left join "actor" on "actor"."actor_id" = "film_actor"."actor_id" order by "film"."title", "actor"."first_name", "actor"."last_name"; --31. Obtener todas las películas y mostrar los actores que han actuado en ellas, incluso si algunas películas no tienen actores asociados.
select "actor"."first_name", "actor"."last_name", "film"."title" from "actor" left join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
left join "film" on "film"."film_id" = "film_actor"."film_id" order by "actor"."first_name", "actor"."last_name", "film"."title"; --32. Obtener todos los actores y mostrar las películas en las que han actuado, incluso si algunos actores no han actuado en ninguna película.
select "film"."title", COUNT("rental"."rental_id") as "registros_alquiler" from "film" left join "inventory" on "film"."film_id" = "inventory"."film_id"
left join "rental" on "rental"."inventory_id" = "inventory"."inventory_id" group BY "film"."film_id", "film"."title" order by "film"."title"; --33. Obtener todas las películas que tenemos y todos los registros de alquiler.
select "customer"."customer_id", "customer"."first_name", "customer"."last_name", SUM("payment"."amount") as "dinero_gastado" from "customer" left join "payment" on "customer"."customer_id" = "payment"."customer_id"
group by "customer"."customer_id", "customer"."first_name", "customer"."last_name" order by "dinero_gastado" desc limit 5; --34. Encuentra los 5 clientes que más dinero se hayan gastado con nosotros.
select "actor_id", "first_name", "last_name" from "actor" where "first_name" = 'JOHNNY'; --35. Selecciona todos los actores cuyo primer nombre es 'Johnny'.
select "first_name" as "Nombre", "last_name" as "Apellido" from "actor"; --36. Renombra la columna “first_name” como Nombre y “last_name” como Apellido.
select MIN ("actor_id") as "id_menor", MAX ("actor_id") as "id_mayor" from "actor"; --37. Encuentra el ID del actor más bajo y más alto en la tabla actor.
select COUNT("actor_id") as "total_actores" from "actor"; --38. Cuenta cuántos actores hay en la tabla “actor”.
select "actor_id", "last_name", "first_name" from "actor" order by "last_name" asc; --39. Selecciona todos los actores y ordénalos por apellido en orden ascendente.
select "film_id", "title" from "film" order by "film_id" asc limit 5; --40. Selecciona las primeras 5 películas de la tabla “film”.
select "first_name", COUNT("first_name") as "numero_actores" from "actor" group by "first_name" ORDER BY "numero_actores" desc; --41. Agrupa los actores por su nombre y cuenta cuántos actores tienen el mismo nombre. ¿Cuál es el nombre más repetido?
select "rental"."rental_id", "customer"."first_name" from "rental" left join "customer" on "rental"."customer_id" = "customer"."customer_id"
order by "rental"."rental_id", "customer"."first_name"; --42. Encuentra todos los alquileres y los nombres de los clientes que los realizaron.
select "customer"."customer_id", "customer"."first_name", "customer"."last_name", "rental"."rental_id" from "customer" left join "rental" on "customer"."customer_id" = "rental"."customer_id"
order by "customer"."customer_id"; --43. Muestra todos los clientes y sus alquileres si existen, incluyendo aquellos que no tienen alquileres.
select * from "film" cross join "category"; --43. Muestra todos los clientes y sus alquileres si existen, incluyendo aquellos que no tienen alquileres.No aporta nada, ya que lo único que valdría es la categoría pero al no tener realción, no tiene sentido
select distinct "actor"."actor_id", "actor"."first_name", "actor"."last_name" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
join "film_category" on "film_actor"."film_id" = "film_category"."film_id" join "category" on "category"."category_id" = "film_category"."category_id"
WHERE "category"."name" = 'Action' order by "actor"."actor_id"; --45. Encuentra los actores que han participado en películas de la categoría 'Action'.
select "actor"."actor_id", "actor"."first_name", "actor"."last_name" from "actor" left join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
WHERE "film_actor"."actor_id" is NULL order by "actor"."actor_id"; --46. Encuentra todos los actores que no han participado en películas.
select "actor"."actor_id", "actor"."first_name", "actor"."last_name", COUNT("film_actor"."film_id") as "numero_peliculas" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
group by "actor"."actor_id", "actor"."first_name", "actor"."last_name" order by "actor"."actor_id"; --47. Selecciona el nombre de los actores y la cantidad de películas en las que han participado.
create view "actor_num_peliculas" AS select "actor"."first_name", "actor"."last_name", COUNT("film_actor"."film_id") as "numero_peliculas" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
group by "actor"."actor_id", "actor"."first_name", "actor"."last_name" order by "actor"."actor_id"; 
select * from "actor_num_peliculas"; --48. Crea una vista llamada “actor_num_peliculas” que muestre los nombresde los actores y el número de películas en las que han participado.
select "customer"."customer_id", "customer"."first_name", "customer"."last_name", COUNT("rental"."rental_id") as "numero_alquileres" from "customer" left join "rental" on "customer"."customer_id" = "rental"."customer_id"
group by "customer"."customer_id", "customer"."first_name", "customer"."last_name" order by "customer"."customer_id"; --49. Calcula el número total de alquileres realizados por cada cliente.
select SUM("length") as "duracion_total" from "film" join "film_category" on "film"."film_id" = "film_category"."film_id" join "category" on "category"."category_id" = "film_category"."category_id"
WHERE "category"."name" = 'Action'; --50. Calcula la duración total de las películas en la categoría 'Action'.
create temporary TABLE "cliente_rentas_temporal" as SELECT "customer_id", COUNT("rental_id") as "alquileres_clientes" from "rental" group by "customer_id";
select "customer_id", "alquileres_clientes" from "cliente_rentas_temporal" order by "customer_id"; --51. Crea una tabla temporal llamada “cliente_rentas_temporal” para almacenar el total de alquileres por cliente.
create temporary TABLE "peliculas_alquiladas" as SELECT "film"."film_id", "film"."title", COUNT("rental"."rental_id") as "numero_alquileres" from "film" join "inventory" on "inventory"."film_id" = "film"."film_id"
join "rental" on "rental"."inventory_id" = "inventory"."inventory_id" group by "film"."film_id", "film"."title" having count("rental"."rental_id") >= 10; 
select "film_id", "title", "numero_alquileres" from "peliculas_alquiladas" order by "film_id"; ----52. Crea una tabla temporal llamada “peliculas_alquiladas” que almacene las películas que han sido alquiladas al menos 10 veces.
select DISTINCT "film"."title", "customer"."first_name", "customer"."last_name" from "film" join "inventory" on "inventory"."film_id" = "film"."film_id"
join "rental" on "inventory"."inventory_id" = "rental"."inventory_id" join "customer" on "customer"."store_id" = "inventory"."store_id"
where "customer"."first_name" = 'TAMMY' and "customer"."last_name" = 'SANDERS' and "rental"."return_date" is NULL order by "film"."title" asc; --53. Encuentra el título de las películas que han sido alquiladas por el cliente con el nombre ‘Tammy Sanders’ y que aún no se han devuelto. Ordena los resultados alfabéticamente por título de película.
select "actor"."first_name", "actor"."last_name", "category"."name" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
join "film_category" on "film_category"."film_id" = "film_actor"."film_id" join "category" on "film_category"."category_id" = "category"."category_id"
where "category"."name" = 'Sci-Fi' order by "actor"."last_name" ASC; --54. Encuentra los nombres de los actores que han actuado en al menos una película que pertenece a la categoría ‘Sci-Fi’. Ordena los resultados alfabéticamente por apellido.
select DISTINCT "actor"."first_name", "actor"."last_name" from "actor" join "film_actor" on "actor"."actor_id" = "film_actor"."actor_id"
join "inventory" on "inventory"."film_id" = "film_actor"."film_id" join "rental" on "rental"."inventory_id" = "inventory"."inventory_id"
where "rental"."rental_date" > (select MIN("rental"."rental_date") from "rental" join "inventory" on "inventory"."film_id" = "rental"."inventory_id"
join "film" on "film"."film_id" = "inventory"."film_id" where "film"."title" = 'SPARTACUS CHEAPER') order by "actor"."last_name" asc; --55. Encuentra el nombre y apellido de los actores que han actuado en películas que se alquilaron después de que la película ‘Spartacus Cheaper’ se alquilara por primera vez. Ordena los resultados alfabéticamente por apellido.
select DISTINCT "actor"."first_name", "actor"."last_name" from "actor" where not exists (select 1 from "film_actor" join "film_category" on "film_actor"."film_id" = "film_category"."film_id"
join "category" on "category"."category_id" = "film_category"."category_id" where "film_actor"."actor_id" = "actor"."actor_id" and "category"."name" = 'Music')
order by "actor"."last_name", "actor"."first_name"; --56. Encuentra el nombre y apellido de los actores que no han actuado en ninguna película de la categoría ‘Music’.
select distinct "film"."title" from "film" join "inventory" on "film"."film_id" = "inventory"."film_id"
join "rental" on "inventory"."inventory_id" = "rental"."inventory_id"
where "rental"."return_date" is not null and extract(day from ("rental"."return_date" - "rental"."rental_date")) > 8
order by "film"."title"; --57. Encuentra el título de todas las películas que fueron alquiladas por más de 8 días.
select "film"."title", "category"."name" from "film" join "film_category" on "film_category"."film_id" = "film"."film_id"
join "category" on "film_category"."category_id" = "category"."category_id" where "category"."name" = 'Animation'; --58. Encuentra el título de todas las películas que son de la misma categoría que ‘Animation’.
select "film"."title" from "film" where "film"."length" = (
select "film"."length" from "film" where "film"."title" = 'DANCING FEVER')
order by "film"."title"; --59. Encuentra los nombres de las películas que tienen la misma duración que la película con el título ‘Dancing Fever’. Ordena los resultados alfabéticamente por título de película.
select "customer"."first_name", "customer"."last_name" from "customer" join "rental" on "rental"."customer_id" = "customer"."customer_id"
join "inventory" on "inventory"."inventory_id" = "rental"."inventory_id" group by "customer"."first_name", "customer"."last_name", "customer"."customer_id"
having count(distinct "inventory"."film_id") >= 7 order by "customer"."last_name", "customer"."first_name"; --60. Encuentra los nombres de los clientes que han alquilado al menos 7 películas distintas. Ordena los resultados alfabéticamente por apellido.
select "category"."name" as "categoria", count("rental"."rental_id") as "alquileres" from "category" join "film_category" on "film_category"."category_id" = "category"."category_id"
join "inventory" on "inventory"."film_id" = "film_category"."film_id" join "rental" on "rental"."inventory_id" = "inventory"."inventory_id"
group by "category"."name" order by "category"."name"; --61. Encuentra la cantidad total de películas alquiladas por categoría y muestra el nombre de la categoría junto con el recuento de alquileres.
select "category"."name" as "categoria", count(distinct "film"."film_id") as "num_peliculas_2006" from "category" join "film_category" on "film_category"."category_id" = "category"."category_id"
join "film" on "film"."film_id" = "film_category"."film_id" where "film"."release_year" = 2006 group by "category"."name" order by "category"."name";
select "category"."name" as "categoria", count(distinct "film"."film_id") as "num_peliculas_2006" from "category" join "film_category" on "film_category"."category_id" = "category"."category_id"
join "film" on "film"."film_id" = "film_category"."film_id" where "film"."release_year" = 2006 group by "category"."name" order by "category"."name"; --62. Encuentra el número de películas por categoría estrenadas en 2006.
select "staff"."staff_id", "staff"."first_name", "staff"."last_name", "store"."store_id" from "staff" cross join "store" order by "staff"."staff_id", "store"."store_id"; --63. Obtén todas las combinaciones posibles de trabajadores con las tiendas que tenemos.
select "customer"."customer_id", "customer"."first_name", "customer"."last_name", count("rental"."rental_id") as "numero_alquileres" from "customer"
left join "rental" on "rental"."customer_id" = "customer"."customer_id" group by "customer"."customer_id", "customer"."first_name", "customer"."last_name"
order by "customer"."customer_id"; --64. Encuentra la cantidad total de películas alquiladas por cada cliente y muestra el ID del cliente, su nombre y apellido junto con la cantidad de películas alquiladas.